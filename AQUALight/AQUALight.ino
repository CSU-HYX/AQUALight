#include <TimeLib.h>
#include <ESP8266WiFi.h>
#include <WiFiUdp.h>
#include <Wire.h>

const int Rf[16][60]={{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},{0,3,6,10,13,16,20,23,27,30,33,37,40,44,47,50,54,57,61,64,67,71,74,77,81,84,88,91,94,98,101,105,108,111,115,118,122,125,128,132,135,138,142,145,149,152,155,159,162,166,169,172,176,179,183,186,189,193,196,200},{200,200,200,200,200,200,200,200,200,200,200,200,200,200,200,200,200,200,200,200,200,200,200,200,200,200,200,200,200,200,200,200,200,200,200,200,200,200,200,200,200,200,200,200,200,200,200,200,200,200,200,200,200,200,200,200,200,200,200,200},{200,200,200,201,201,201,202,202,202,203,203,203,204,204,204,205,205,205,206,206,206,207,207,207,208,208,208,209,209,209,210,210,210,211,211,211,212,212,212,213,213,213,214,214,214,215,215,215,216,216,216,217,217,217,218,218,218,219,219,220},{220,220,220,220,220,220,220,220,220,220,220,220,220,220,220,220,220,220,220,220,220,220,220,220,220,220,220,220,220,220,220,220,220,220,220,220,220,220,220,220,220,220,220,220,220,220,220,220,220,220,220,220,220,220,220,220,220,220,220,220},{220,220,220,220,220,220,220,220,220,220,220,220,220,220,220,220,220,220,220,220,220,220,220,220,220,220,220,220,220,220,220,220,220,220,220,220,220,220,220,220,220,220,220,220,220,220,220,220,220,220,220,220,220,220,220,220,220,220,220,220},{220,219,219,218,218,218,217,217,217,216,216,216,215,215,215,214,214,214,213,213,213,212,212,212,211,211,211,210,210,210,209,209,209,208,208,208,207,207,207,206,206,206,205,205,205,204,204,204,203,203,203,202,202,202,201,201,201,200,200,200},{200,199,199,198,198,198,197,197,196,196,196,195,195,194,194,194,193,193,192,192,192,191,191,191,190,190,189,189,189,188,188,187,187,187,186,186,185,185,185,184,184,184,183,183,182,182,182,181,181,180,180,180,179,179,178,178,178,177,177,177},{177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177},{177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177},{177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177},{177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177},{180,176,173,170,167,164,161,158,155,152,149,146,143,140,137,134,131,128,125,122,118,115,112,109,106,103,100,97,94,91,88,85,82,79,76,73,70,67,64,61,57,54,51,48,45,42,39,36,33,30,27,24,21,18,15,12,9,6,3,0},{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}};
const int Gf[16][60]={{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},{0,1,3,5,6,8,10,11,13,15,16,18,20,22,23,25,27,28,30,32,33,35,37,38,40,42,44,45,47,49,50,52,54,55,57,59,61,62,64,66,67,69,71,72,74,76,77,79,81,83,84,86,88,89,91,93,94,96,98,100},{100,100,100,101,101,102,102,102,103,103,104,104,105,105,105,106,106,107,107,108,108,108,109,109,110,110,111,111,111,112,112,113,113,113,114,114,115,115,116,116,116,117,117,118,118,119,119,119,120,120,121,121,122,122,122,123,123,124,124,125},{125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125},{125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125},{125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125},{125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125},{125,124,124,124,123,123,123,123,122,122,122,122,121,121,121,121,120,120,120,120,119,119,119,119,118,118,118,118,117,117,117,117,116,116,116,116,115,115,115,115,114,114,114,114,113,113,113,113,112,112,112,112,111,111,111,111,110,110,110,110},{110,109,108,108,107,106,106,105,105,104,103,103,102,102,101,100,100,99,99,98,97,97,96,95,95,94,94,93,92,92,91,91,90,89,89,88,88,87,86,86,85,84,84,83,83,82,81,81,80,80,79,78,78,77,77,76,75,75,74,74},{74,73,73,73,73,72,72,72,72,71,71,71,71,70,70,70,70,69,69,69,69,69,68,68,68,68,67,67,67,67,66,66,66,66,65,65,65,65,64,64,64,64,64,63,63,63,63,62,62,62,62,61,61,61,61,60,60,60,60,60},{60,59,58,58,57,57,56,56,55,54,54,53,53,52,52,51,51,50,49,49,48,48,47,47,46,46,45,44,44,43,43,42,42,41,40,40,39,39,38,38,37,37,36,35,35,34,34,33,33,32,32,31,30,30,29,29,28,28,27,27},{27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27},{27,26,26,25,25,24,24,23,23,22,22,21,21,21,20,20,19,19,18,18,17,17,16,16,16,15,15,14,14,13,13,12,12,11,11,10,10,10,9,9,8,8,7,7,6,6,5,5,5,4,4,3,3,2,2,1,1,0,0,0},{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}};
const int Bf[16][60]={{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},{0,3,6,9,12,15,18,22,25,28,31,34,37,40,44,47,50,53,56,59,63,66,69,72,75,78,81,85,88,91,94,97,100,104,107,110,113,116,119,122,126,129,132,135,138,141,145,148,151,154,157,160,163,167,170,173,176,179,182,186},{186,186,186,186,186,186,186,186,186,186,186,186,186,186,186,186,186,186,186,186,186,186,186,186,186,186,186,186,186,186,186,186,186,186,186,186,186,186,186,186,186,186,186,186,186,186,186,186,186,186,186,186,186,186,186,186,186,186,186,186},{186,186,187,188,188,189,190,191,191,192,193,194,194,195,196,197,197,198,199,200,200,201,202,203,203,204,205,206,206,207,208,209,209,210,211,212,212,213,214,215,215,216,217,218,218,219,220,221,221,222,223,224,224,225,226,227,227,228,229,230},{230,230,230,231,231,232,232,232,233,233,234,234,235,235,235,236,236,237,237,238,238,238,239,239,240,240,241,241,241,242,242,243,243,243,244,244,245,245,246,246,246,247,247,248,248,249,249,249,250,250,251,251,252,252,252,253,253,254,254,255},{255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255},{255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255},{255,254,253,252,251,250,249,248,247,246,245,244,243,242,241,241,240,239,238,237,236,235,234,233,232,231,230,229,228,227,227,226,225,224,223,222,221,220,219,218,217,216,215,214,213,213,212,211,210,209,208,207,206,205,204,203,202,201,200,200},{200,200,200,200,200,200,200,200,200,200,200,200,200,200,200,200,200,200,200,200,200,199,199,199,199,199,199,199,199,199,199,199,199,199,199,199,199,199,199,199,199,198,198,198,198,198,198,198,198,198,198,198,198,198,198,198,198,198,198,198},{198,198,198,198,198,198,198,198,198,198,198,198,198,198,198,198,198,198,198,198,198,198,198,198,198,198,198,198,198,198,198,198,198,198,198,198,198,198,198,198,198,198,198,198,198,198,198,198,198,198,198,198,198,198,198,198,198,198,198,198},{198,198,198,198,198,198,198,198,198,198,198,198,198,198,198,198,198,198,198,198,198,198,198,198,198,198,198,198,198,198,198,198,198,198,198,198,198,198,198,198,198,198,198,198,198,198,198,198,198,198,198,198,198,198,198,198,198,198,198,198},{198,198,198,198,198,198,198,198,198,198,198,198,198,198,198,198,198,198,198,198,198,198,198,198,198,198,198,198,198,198,198,198,198,198,198,198,198,198,198,198,198,198,198,198,198,198,198,198,198,198,198,198,198,198,198,198,198,198,198,198},{198,196,194,193,191,189,188,186,184,183,181,179,178,176,174,173,171,169,168,166,164,163,161,159,158,156,154,153,151,149,148,146,144,143,141,139,138,136,134,133,131,129,128,126,124,123,121,119,118,116,114,113,111,109,108,106,104,103,101,100},{100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100},{100,98,96,94,93,91,89,88,86,84,83,81,79,77,76,74,72,71,69,67,66,64,62,61,59,57,55,54,52,50,49,47,45,44,42,40,38,37,35,33,32,30,28,27,25,23,22,20,18,16,15,13,11,10,8,6,5,3,1,0}};
const int Wf[16][60]={{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},{0,1,2,4,5,7,8,10,11,13,14,16,17,19,20,22,23,25,26,28,29,30,32,33,35,36,38,39,41,42,44,45,47,48,50,51,53,54,56,57,58,60,61,63,64,66,67,69,70,72,73,75,76,78,79,81,82,84,85,87},{87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87},{87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87},{87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87},{87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87},{87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87},{87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87},{87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87},{87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87},{87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87},{87,87,86,86,85,85,84,84,83,83,82,82,81,81,80,80,79,79,78,78,77,77,77,76,76,75,75,74,74,73,73,72,72,71,71,70,70,69,69,68,68,68,67,67,66,66,65,65,64,64,63,63,62,62,61,61,60,60,59,59},{59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59},{59,59,58,57,56,55,54,53,52,51,50,49,48,47,46,45,44,43,42,41,40,39,38,37,36,35,34,33,32,31,30,29,28,27,26,25,24,23,22,21,20,19,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1},{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}};

/* NTP服务器部分 */
static const char NTP_Server_Name[] = "ntp.ntsc.ac.cn"; //设置网络授时服务器地址
const int TimeZone = +8;                                //时区 北京时间
WiFiUDP Udp;                                            //设置连接模式
unsigned int localPort = 8888;                          // 用于侦听UDP数据包的本地端口

time_t Get_NTP_Time();                                  // 获取NTP时间
void SendTime();                                     //显示时间
void FormatTime(int Code);                              //格式化数字
void Send_NTP_Pkg(IPAddress &address);                  //发送NTP包

/* 模块配置部分 */
void setup() {
  Wire.begin(D1, D2);                                   // join i2c bus with SDA=D1 and SCL=D2 of NodeMCU 设置I2C通信引脚
                                                        //Serial.begin(9600);//调试时可以开启串口
  delay(2);                                             //等待2s
  WiFi.begin("yourWiFiSSID", "yourWiFiPSW");                     //设置无线网络连接SSID,密码
  while (WiFi.status() != WL_CONNECTED) {               //循环直到无线网络连接成功
    delay(500);
  }
  Udp.begin(localPort);                                 //启动网络连接
  setSyncProvider(Get_NTP_Time);                        //设置同步提供程序
  setSyncInterval(300);                                 //设置同步间隔
}

time_t LastTime = 0;                                    // 显示数字时钟时

void loop() {
  if (timeStatus() != timeNotSet) {                     //如果时间状态不等于“时间未设置”，那么：
    if (now() != LastTime) {                            //如果当前时间不等于“上一个时间”那么：
      LastTime = now();                                 //更新时间提示
      SendTime(hour(),minute());                        //使用I2C发送数据（函数）
    }
  }
  delay(10000);
}

/* 使用I2C发送当前色彩通道亮度值 */
void SendTime(int H,int M) {
  if(H>5 && H<22){                                      //判断当前时间是否介于5：00-22：00
  Wire.beginTransmission(8);                            //启动I2C通讯
  int R = Rf[H-6][M];                                   //获取各个颜色通道在当前时间的值
  int G = Gf[H-6][M];
  int B = Bf[H-6][M];
  int W = Wf[H-6][M];
  String command = "R:"+String(R)+";G:"+String(G)+";B:"+String(B)+";W:"+String(W);
                                                        //Serial.println(command.c_str());
  Wire.write(command.c_str());                          //传输颜色至下位机
  Wire.endTransmission();                               //停止传输
  }
  else{                                                 //若当前为22：00-5：00，则令所有通道的亮度都为0
    Wire.beginTransmission(8);
    String command = "R:0;G:0;B:0;W:0";
    Wire.write(command.c_str());
    Wire.endTransmission();
    }
}


/*-------- NTP code ----------*/

const int NTP_Pkg_Size = 48;                             //NTP包大小        NTP时间在消息的前48个字节中
byte DatabufferZone[NTP_Pkg_Size];                       //数据包缓冲区      用于保存传入和传出数据包的缓冲区
time_t Get_NTP_Time() {                                  //获取NTP时间
  IPAddress NTP_Server_IP;                               // NTP服务器的IP地址
  while (Udp.parsePacket() > 0) ;                        //丢弃以前接收的任何数据包
                                                         //Serial.println("传输NTP请求");
  WiFi.hostByName(NTP_Server_Name, NTP_Server_IP);       // 从池中获取随机服务器
                                                         //Serial.print(NTP_Server_Name);
                                                         //Serial.print(": ");
                                                         //Serial.println(NTP_Server_IP);
  Send_NTP_Pkg(NTP_Server_IP);
  uint32_t ShangCiShiJian = millis();                    //开始等待
  while (millis() - ShangCiShiJian < 1500) {             //如果小于这个时间则
    int size = Udp.parsePacket();                        //分析数据包
    if (size >= NTP_Pkg_Size) {                          //如果 获取到的包 大于或等于 NTP包大小
                                                         //Serial.println("接收NTP响应");
      Udp.read(DatabufferZone, NTP_Pkg_Size);            // 将数据包读取到缓冲区
      unsigned long secsSince1900;                       //从1900年到现在的秒
      /* 将从位置40开始的四个字节转换为长整数 */
      secsSince1900 =  (unsigned long)DatabufferZone[40] << 24;
      secsSince1900 |= (unsigned long)DatabufferZone[41] << 16;
      secsSince1900 |= (unsigned long)DatabufferZone[42] << 8;
      secsSince1900 |= (unsigned long)DatabufferZone[43];
      return secsSince1900 - 2208988800UL + TimeZone * SECS_PER_HOUR;
    }
  }
  Serial.println("无NTP响应");
  return 0; // 如果无法获得时间，则返回0
}

/* 向给定地址的时间服务器发送NTP请求 */
void Send_NTP_Pkg(IPAddress &address) {

  /* 将缓冲区中的所有字节设置为0 */
  memset(DatabufferZone, 0, NTP_Pkg_Size);                //清零
  /*初始化形成NTP请求所需的值（有关数据包的详细信息，请参阅上面的URL）*/
  DatabufferZone[0] = 0b11100011;                         // li，版本，模式
  DatabufferZone[1] = 0;                                  // 时钟的层次或类型
  DatabufferZone[2] = 6;                                  // 轮询间隔
  DatabufferZone[3] = 0xEC;                               // 对等时钟精度
  /*根延迟和根分散为8字节零*/
  DatabufferZone[12] = 49;
  DatabufferZone[13] = 0x4E;
  DatabufferZone[14] = 49;
  DatabufferZone[15] = 52;
  /*所有ntp字段现在都有值*/
  /*可以发送请求时间戳的数据包：*/
  Udp.beginPacket(address, 123);                          //NTP请求到端口123
  Udp.write(DatabufferZone, NTP_Pkg_Size);
  Udp.endPacket();
}
